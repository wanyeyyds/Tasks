# 递归问题之汉诺塔

 汉诺塔（Hanni Tower），又称为河内塔，源于印度一个古老的传说。大梵天创造世界的时候做了三个金刚石柱子，在一根柱子上从下往上按照大小顺序放着64个黄金圆盘。大梵天命令婆罗门把圆盘从下面楷书按大小顺序重新摆放在另一根柱子上。并且规定，任何时候，在小圆盘上都不能方大圆盘，且在三根柱子之间一次只能移动一个圆盘。问该怎么操作？

  分析：假设有A,B,C三个柱子，先需要将A柱子上的圆盘移动到C柱子上，B柱子做辅助。若只有一个圆盘的时候，只需要将圆盘这样移动：A - > C；若是有两个圆盘则需要移动：A -> B，A - > C，B - > C；若是由三个盘子则可以：A - > C，A - > B，C - > B，A - > C，B - > A，B - > C，A - > C移动；… … 若有n个盘子，则将（n-1）个盘子当做一个整体从A柱经过C柱的帮助移动到B柱上，最后一个盘子直接移动到C柱上，再继续讲（n - 1）个盘子从B柱经过A柱的帮助移动到C柱上。

  经过上述的分析可以使用递归的方式实现汉诺塔，如下代码示例：

public class Test {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num = sc.nextInt();
        char charA = 'A';
        char charB = 'B';
        char charC = 'C';
        hanio(num, charA, charB, charC);
    }
    //求具体的实现方式，即每一步的走法
    public static void hanio(int n,char a,char b,char c){
        if(n == 1){
            System.out.println(n + "号：" + a + "->" + c);
        }else{
            hanio((n - 1), a, c, b);
            System.out.println(n + "号：" + a + "->" + c);
            hanio((n - 1), b, a, c);
        }
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
输出结果：

3       //(这个“3”表示用户输入，确定初始的柱子上的圆盘个数)
1号：A->C
2号：A->B
1号：C->B
3号：A->C
1号：B->A
2号：B->C
1号：A->C

[本文为CSDN博主「Mr.Brank」的原创文章](https://blog.csdn.net/qq_45285376/article/details/115525110)
